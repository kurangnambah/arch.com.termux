#!/usr/bin/env bash
# Author: Alexander https://github.com/alexander

flag=""
currentVersion="1.23.0"
configuredClient=""
usage(){
cat <<EOF
 Get Started
 Todo++
 --
EOF
}
start__interface(){

IFS=""
PASS="test"

 __init(){
tput civis
arr="-\|/"
while true; do
  for c in 90 31 91 32 33 34 35 95 36 97; do
   echo -en "\e[${c}m ●   \e[33m ●   \e[32m ●  \e[0m"
   echo -en "\e[${c}m KEY IS WRONG !! \e[0m\n"
   echo -en "\e[${c}m ● ] todo  1)  disingkat.wr\e[0m\n\n"
   echo -en "\e[${c}m           2)  neepaks \e[0m\n"
   usage
   printf "\b\e[${c}m ${arr:i++%${#arr}:1} \e[0m"
   sleep .1
   clear
  done
done
tput cnorm
 }
  __init
}

## This function determines which http get tool the system has installed and returns an error if there isnt one
getConfiguredClient()
{
  if  command -v curl &>/dev/null; then
    configuredClient="curl"
  elif command -v wget &>/dev/null; then
    configuredClient="wget"
  elif command -v http &>/dev/null; then
    configuredClient="httpie"
  elif command -v fetch &>/dev/null; then
    configuredClient="fetch"
  else
    echo "Error: This tool requires either curl, wget, httpie or fetch to be installed." >&2
    return 1
  fi
}

## Allows to call the users configured client without if statements everywhere
httpGet()
{
  case "$configuredClient" in
    curl)  curl -A curl -s "$@" ;;
    wget)  wget -qO- "$@" ;;
    httpie) http -b GET "$@" ;;
    fetch) fetch -q "$@" ;;
  esac
}

addTask()
{
  if [ ! -f ~/.todo/list.txt ]; then
    if [ ! -d ~/.todo ]; then mkdir ~/.todo; fi
    touch ~/.todo/list.txt
  fi
  echo "$1       ;      $(date)" >> ~/.todo/list.txt
}

checkInternet()
{
  httpGet github.com > /dev/null 2>&1 || { echo "Error: no active internet connection" >&2; return 1; } # query github with a get request
}

removeTask()
{
  ## Check for valid task numbers (valid characters)
  if [ -f ~/.todo/temp.txt ];then rm -f ~/.todo/temp.txt;fi
  touch ~/.todo/temp.txt
  for taskToRemove in "$@";do
    oldTaskNumber=$taskToRemove
    taskNumber=$( echo "$taskToRemove" | grep -Eo "[0-9]*" )
    if [[ $taskNumber == "" || $oldTaskNumber != $taskNumber ]]; then echo "Error: $oldTaskNumber is not a valid task number!" && return 1; fi
  done
  count="0"
  IFS=$'\n'       # make newlines the only separator

  ## Removing the task (only don't add to temp if we should remove it)
  for task in $(cat ~/.todo/list.txt); do
    removeIt="false"
    for taskToRemove in "$@";do
      if [[ $(($count + 1)) == "$taskToRemove" ]]; then
      removeIt="true"
      break
      fi
    done
    if ! $removeIt ;then echo "$task" >> ~/.todo/temp.txt;fi
    count=$(( $count + 1 ))
  done
  rm -f ~/.todo/list.txt
  cp  ~/.todo/temp.txt ~/.todo/list.txt
  rm -f ~/.todo/temp.txt

  ##Checking if the task exists
  for taskToRemove in "$@" ;do
    if [ $count -lt "$taskToRemove" ]; then
      echo "Error: task number $taskToRemove does not exist!"
    else
      echo "Sucessfully removed task number $taskToRemove"
    fi
  done
}

getTasks()
{
  if [ -f ~/.todo/list.txt ]; then
    checkEmpty=$(cat ~/.todo/list.txt)
    if [[ $checkEmpty == "" ]]; then
      echo "No tasks found"
    else
      count="1"
      IFS=$'\n'       # make newlines the only separator
      for task in $(cat ~/.todo/list.txt); do
        tempTask=$count
        if [ $count -lt 10 ]; then tempTask="0$count"; fi
        echo "$tempTask). $task"  >> ~/.todo/getTemp.txt
        count=$(( $count + 1 ))
      done
      cat ~/.todo/getTemp.txt | column -t -s ";"
      rm -f ~/.todo/getTemp.txt
    fi
  else
    echo "No tasks found"
  fi
}

clearAllTasks()
{
  rm -f ~/.todo/list.txt || return 1
  touch ~/.todo/list.txt || return 1
  echo "Tasks sudah di bersihkan [×.|_>=====.+] whoosp."
}

while getopts "cr:a:guvh" opt; do
  case "$opt" in
    \?) echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    c)  if [[ $flag == "" ]]; then
          flag="clear"
        else
          echo "Error: all flags are mutually exclusive"
          exit 1
        fi
        ;;
    h)  usage
        exit 0
        ;;
    v)  echo "Version $currentVersion"
        exit 0
        ;;
    g)  if [[ $flag == "" ]]; then
          flag="get"
        else
          echo "Error: all flags are mutually exclusive"
          exit 1
        fi
        ;;
    r)  if [[ $flag == "" ]]; then
          flag="remove"
        else
          echo "Error: all flags are mutually exclusive"
          exit 1
        fi
        ;;
    a)  if [[ $flag == "" ]]; then
          flag="add"
        else
          echo "Error: all flags are mutually exclusive"
          exit 1
        fi
        ;;
    u)  getConfiguredClient || exit 1
        checkInternet || exit 1
        update
        exit 0
        ;;
    :)  echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
  esac
done

__start(){
 start__interface

if [[ $# == "0" ]]; then
usage
read -r -p "[×.-]/\/[ write.w ] " synt
case $synt in
"clear")
  clearAllTasks || exit 1
;;
"help")
    usage
    exit 0
;;
"add")
read -r -p ":: [ what ] whats are you wanna to .. added ? /add" adduh
addTask "$adduh" && getTasks || exit 1
;;
"remove")
read -r -p ":: [ what ] whats are you wan't to .. remove ? /remove" remay
removeTask "$remay" && getTasks || exit 1
;;
*)
__start
;;
esac
elif [[ $# == "1" ]]; then
  if [[ $1 == "clear" ]]; then
    clearAllTasks || exit 1
  elif [[ $1 == "help" ]]; then
    usage
    exit 0
  elif [[ $flag == "clear" || $1 == "clear" ]]; then clearAllTasks || exit 1
  elif [[ $flag == "get" || $1 == "list" || $1 == "get" ]]; then getTasks || exit 1
  else { echo "Error: the argument $1 is not valid"; exit 1; }; fi
else
  if [[ $flag == "add" || $1 == "add" ]]; then addTask "${*:2}" && getTasks || exit 1
  elif [[ $flag == "remove" || $1 == "remove" ]]; then removeTask "${*:2}" && getTasks || exit 1
  else { usage; exit 1; }; fi
fi
}

__start
