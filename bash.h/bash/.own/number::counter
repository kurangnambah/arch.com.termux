#!/bin/bash
init__(){
read -r -p "[+0-] \0-9/ × know'n that .. i wanna .. this case .. /+in-dec count .×. [ N° ] " no
echo ":: [ ~/ ]  :_N°   pick your option take a of .. type of count .. \/\v/\/"
echo ":: :/inc:    :++0   _ increment      --10× "
echo ":: :/dec:    :--0   _ decrement      --1× "
echo ":: :/count:  :--0   counter hh/mm/ss --1× "
echo ""
read -r -p "[inc/dec/count/no-default] : " letsa
case $letsa in
inc)
init_(){
counter=0;
maxNUM=500
startNUM=0
echo -e ":/: pick transition while number changing"
echo ":/x   horizontal"
echo ":/0   visibility"
read -r -p "[0/x/no-default]" tition
#if tr 'a-zA-Z' -dc -ne $inp
# | fold -w 6 | head -n 1
# then
# clear;
# init__
#fi
printf ''
case $no in
$no )
while true; do
count=$((counter + 1))
counter=$count
if [[ $counter -le $no ]]
 then
  case $tition in
  x)
  echo -n "$count "
  sleep .5
  ;;
  0)
  printf '\b%.1s' "$count"
  sp=${count#??}${count%???}
  sleep .5
  ;;
  *)
  shift;
  exit;;
  esac
 else
 wait
fi
done
;;
*)
clear;
init__
;;
esac
}
init_
exit;;
dec)
init_(){
from=900
to=0
maxNum=900
countdown=$no
echo -e ":/: pick transition while number changing"
echo ":/x   horizontal"
echo ":/0   visibility"
read -r -p "[0/x/no-default]" tition
#if tr 'a-zA-Z' -dc -ne $inp
# | fold -w 6 | head -n 1
# then
# clear;
# init__
#fi
printf ''
case $no in
$no )
while true; do
count=$((countdown - 1))
countdown=$count
if [[ $to -le $count ]]
 then
  case $tition in
  x)
  echo -n "$count "
  sleep .5
  ;;
  0)
  printf '\b%.1s' "$count"
  sp=${count#??}${count%???}
  sleep .5
  ;;
  *)
  shift;
  exit;;
  esac
 else
 wait
fi
done
;;
*)
clear;
init__
;;
esac
}
init_
exit;;
count)
wseconds=${1:-25}*60;
pseconds=${2:-wseconds/300}*60;
# Check os and behave accordingly
if [ "$(uname)" == "Darwin" ]; then
    while true; do
        date1=$((`date +%s` + $wseconds));
        while [ "$date1" -ge `date +%s` ]; do
            echo -ne "$(date -u -j -f %s $(($date1 - `date +%s`)) +%H:%M:%S)\r";
        done
        osascript -e 'display notification "Time to walk and rest!" with title "Break"';
        read -n1 -rsp $'Press any key to continue or Ctrl+C to exit...\n';
        date2=$((`date +%s` + $pseconds));
        while [ "$date2" -gt `date +%s` ]; do
            echo -ne "$(date -u -j -f %s $(($date2 - `date +%s`)) +%H:%M:%S)\r";
        done
        osascript -e 'display notification "Time to get back to work" with title "Work"';
        read -n1 -rsp $'Press any key to continue or Ctrl+C to exit...\n';
    done
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    while true; do
        date1=$((`date +%s` + $wseconds));
        while [ "$date1" -ge `date +%s` ]; do
            echo -ne "$(date -u --date @$(($date1 - `date +%s` )) +%H:%M:%S)\r";
        done
        notify-send "Break" "Time to walk and rest";
        read -n1 -rsp $'Press any key to continue or Ctrl+C to exit...\n';
        date2=$((`date +%s` + $pseconds));
        while [ "$date2" -ge `date +%s` ]; do
            echo -ne "$(date -u --date @$(($date2 - `date +%s` )) +%H:%M:%S)\r";
        done
        notify-send "Work" "Time to get back to work";
        read -n1 -rsp $'Press any key to continue or Ctrl+C to exit...\n';
    done
else
    echo -ne "Your OS is currently not supported\n";
fi
exit;;
esac
}
init__
