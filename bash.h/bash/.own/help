## ARITHMTIC EXPANSIONAL CONDITIONAL

# if [ 0 -eq 6 ]
# echo 6
# if [ 0 -ne 6 ]
# echo 12345789
# if [ 0 -lt 6 ]
# echo 12345
# if [ 0 -le 6 ]
# echo 123456
# if [ 0 -gt 6 ]
# echo 78910
# if [ 0 -ge 6 ]
# echo 678910


#ARGS.. PARSE

while [ $# -gt 0 ]; do
    case "$1" in
        -h | --help)
            echo -e "${yellow}OpenVPN automatic server and client certificate(s) setup script, v0.01 :: Author: niemal"
            echo -e "      ${white}For a client certificate/package only refer to the create_client.sh script.\n"
            echo -e "Parameters:"
            echo -e "  $lightred--clients ${white}[integer]$nocolour            - Specifies the amount of client certificates to be automatically created. Default is 1."
            echo -e "  $lightred--servername ${white}[string(text)]$nocolour    - Defines the server's name. Default is 'server'."
            echo -e "  $lightred--sslconf ${white}[absolute(path)]$nocolour     - Path for the openssl.cnf creation. It is created by default at '/etc/openvpn/openssl.cnf'."
            echo -e "  $lightred--certs ${white}[absolute(path)]$nocolour       - Path to the certificates directory. If it doesn't exist, it gets created. Default is '/etc/openvpn/certs'."
            echo -e "  $lightred--certmodulus ${white}[integer(bit)]$nocolour   - The RSA modulus bit setting. Default is 2048."
            echo -e "  $lightred--expires ${white}[integer(days)]$nocolour      - The certificate expiration in days. Default is 31337."
            echo -e "  $lightred--duplicate-cn$nocolour                 - Allow duplicate certificates in the network. Default is to not."
            echo -e "  $lightred--cipher ${white}[string(cipher)]$nocolour      - The server's encryption cipher. Default is AES-256-CBC."
            echo -e "  $lightred--port ${white}[integer(port)]$nocolour         - The server's port. Default is 1194."
            echo -e "  $lightred--vpnsubnet ${white}[string(subnet)]$nocolour   - The network's subnet, CIDR 24. Default is '10.8.0.0'."
            echo -e "  $lightred--dns1 ${white}[string(ip)]$nocolour            - Defines DNS #1 for the server.conf. Default is OpenDNS, 208.67.222.222."
            echo -e "  $lightred--dns2 ${white}[string(ip)]$nocolour            - Defines DNS #2 for server.conf. Default is OpenDNS, 208.67.220.220."
            echo -e "  $lightred--exitnode$nocolour                     - Configures iptables so the client can access the internet through the VPN. Requires --iface."
            echo -e "  $lightred--iface ${white}[string(interface)]$nocolour    - Declares the interface for --exitnode. Default is eth0."
            exit 0;;
        -c | --clients)
            shift
            clients=$1;;
        -s | --servername)
            shift
            servername=$1;;
        -ssl | --sslconf)
            shift
            sslconf=$1;;
        -ce | --certs)
            shift
            certs=$1;;
        -cm | --certmodulus)
            shift
            certmodulus=$1;;
        -e | --expires)
            shift
            expiration=$1;;
        -dcn | --duplicate-cn)
            shift
            duplicatecn="duplicate-cn";;
        -ci | --cipher)
            shift
            cipher=$1;;
        -p | --port)
            shift
            port=$1;;
        -pro | --proto)
            shift
            proto=$1;;
        -sub | --vpnsubnet)
            shift
            vpnsubnet=$1;;
        -d1 | --dns1)
            shift
            dns1=$1;;
        -d2 | --dns2)
            shift
            dns2=$1;;
        -en | --exitnode)
            shift
            exitnode=true;;
        -if | --iface)
            shift
            iface=$1;;
    esac
    shift
done

######
#e.g : parameter while create menu
#!/bin/bash
# while-menu: a menu driven system information program

DELAY=1 # Number of seconds to display results
while true; do
    clear
	cat << EOF
        Please Select:
        1. Display System Information
        2. Display Disk Space
        3. Display Home Space Utilization
        0. Quit
        EOF
    read -p "Enter selection [0-3] > "
    case "$REPLY" in
        0)
            break
            ;;
        1)
            echo "Hostname: $HOSTNAME"
            uptime
            ;;
        2)
            df -h
            ;;
        3)
            if [[ $(id -u) -eq 0 ]]; then
                echo "Home Space Utilization (All Users)"
                du -sh /home/*
            else
                echo "Home Space Utilization ($USER)"
                du -sh $HOME
            fi
            ;;
        *)
            echo "Invalid entry."
            ;;
    esac
    sleep "$DELAY"
done
echo "Program terminated."

######
#e.g : looping read with while
######
#!/bin/bash

count=0
while read; do
	printf "%d %s\n" $REPLY
	count=$(expr $count + 1)
done < $1

#################
# e.g : example ghost install
#!/usr/bin/env bash

clear

set -e

echo ""

echoerr() { echo "ERROR: ${1}" >&2; }

if [ "$(id -u)" != 0 ]; then
  echoerr "This script must be run as root. 'sudo bash $0'"
  exit 1
fi

os_type="$(lsb_release -si 2>/dev/null)"
if [ "$os_type" != "Ubuntu" ] && [ "$os_type" != "Debian" ]; then
  echoerr "Only supports Ubuntu/Debian"
  exit 1
fi

if [ "$os_type" = "Ubuntu" ]; then
  os_ver="$(lsb_release -sr)"
  if [ "$os_ver" != "16.04" ] && [ "$os_ver" != "14.04" ] && [ "$os_ver" != "12.04" ]; then
    echoerr "Only supports Ubuntu 12.04/14.04/16.04"
    exit 1
  fi
fi

if [ "$os_type" = "Debian" ]; then
  os_ver="$(sed 's/\..*//' /etc/debian_version 2>/dev/null)"
  if [ "$os_ver" != "8" ]; then
    echoerr "Only supports Debian 8 (Jessie)"
    exit 1
  fi
fi

phymem="$(free | awk '/^Mem:/{print $2}')"
[ -z "$phymem" ] && phymem=0
if [ "$phymem" -lt 1000000 ]; then
  echoerr "A minimum of 1024 MB RAM is required."
  exit 1
fi

echo "Please enter valid hostname:"
echo ""
read HOSTNAME

FQDN_REGEX='^(([a-zA-Z](-?[a-zA-Z0-9])*)\.)*[a-zA-Z](-?[a-zA-Z0-9])+\.[a-zA-Z]{2,}$'
if ! printf %s "$HOSTNAME" | grep -Eq "$FQDN_REGEX"; then
  echoerr "Invalid parameter. You must enter a FQDN domain name... exp: blog.mertcangokgoz.com"
  exit 1
fi

echo "System upgrade and install dependencies"
apt-get -y update
apt-get -y upgrade
apt-get install -y npm nodejs nodejs-legacy zip nginx
curl -sL https://deb.nodesource.com/setup_8.x | sudo bash -

echo "Ghost download and configuring"
mkdir -p /var/www
cd /var/www/
curl -L -O https://ghost.org/zip/ghost-latest.zip
unzip -d ghost ghost-latest.zip
rm ghost-latest.zip
cd ghost/
sed -e "s/my-ghost-blog.com/$HOSTNAME/" <config.example.js > config.js
npm install -g grunt-cli
npm install --production

echo "configuring ghost user"
adduser --shell /bin/bash --gecos 'Ghost application' ghost --disabled-password
echo ghost:ghost | chpasswd
chown -R ghost:ghost /var/www/ghost/

echo "configuring nginx"
touch /etc/nginx/sites-available/ghost
echo "server {" >> /etc/nginx/sites-available/ghost
echo "    listen 80;" >> /etc/nginx/sites-available/ghost
echo "    server_name $HOSTNAME;" >> /etc/nginx/sites-available/ghost
echo "    location / {" >> /etc/nginx/sites-available/ghost
echo "        proxy_set_header   X-Real-IP \$remote_addr;" >> /etc/nginx/sites-available/ghost
echo "        proxy_set_header   Host      \$http_host;" >> /etc/nginx/sites-available/ghost
echo "        proxy_pass         http://127.0.0.1:2368;" >> /etc/nginx/sites-available/ghost
echo "        }" >> /etc/nginx/sites-available/ghost
echo "    }" >> /etc/nginx/sites-available/ghost

ln -s /etc/nginx/sites-available/ghost /etc/nginx/sites-enabled/ghost

echo "remove default profile and restart nginx"
rm /etc/nginx/sites-available/default
rm /etc/nginx/sites-enabled/default
service nginx restart

echo "install PM2"
echo "#!/usr/bin/env bash" >> /home/ghost/start.sh
echo "export NODE_ENV=production" >> /home/ghost/start.sh
echo "cd /var/www/ghost/" >> /home/ghost/start.sh
echo "npm start --production" >> /home/ghost/start.sh
chmod +x /home/ghost/start.sh
npm install pm2 -g

echo "configuring PM2"
su -c "echo 'export NODE_ENV=production' >> ~/.profile" -s /bin/bash ghost
su -c "source ~/.profile" -s /bin/bash ghost
su -c "/usr/local/bin/pm2 kill" -s /bin/bash ghost
su -c "env /usr/local/bin/pm2 start /home/ghost/start.sh --interpreter=bash --name ghost" -s /bin/bash ghost
env PATH=$PATH:/usr/bin pm2 startup ubuntu -u ghost --hp /home/ghost
su -c "pm2 save" -s /bin/bash ghost

echo "Ghost CMS Started"
